


http://www.cnblogs.com/shenxiaoquan/tag/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/

 
Java中Comparable和Comparator区别
	 http://blog.csdn.net/jq_ak47/article/details/61203817
	 Comparable public int compareTo(T o);>1/<-1/=0
	 Comparable可以认为是一个内比较器,
	 很多类都会实现这个接口以提供对该类对象之间比较的默认实现
	 String ，Integer,Float,Double类都实现了Comparable接口

	 这些类提供了自己对象之间比较大小的默认实现
	 开发者add进入一个Collection的对象
	 想要通过Collections的sort方法帮你自动进行排序的话，
	 那么这个add进入的对象类必须实现Comparable接口



	Comparator
	int compare(T o1, T o2);
	1、o1大于o2，返回1
	2、o1等于o2，返回0
	3、o1小于o3，返回-1
	Comparator可以认为是是一个外比较器	
	一个对象不支持自己和自己比较（没有实现Comparable接口），但是又想对两个对象进行比较；
	一般同类型对象比较很少实现这个接口

	一个对象实现了Comparable接口，但是开发者认为compareTo方法中的比较方式并不是自己想要的那种比较方式。
	Comparator接口更多是实现这个功能。对特定比较需求提供支持

http://www.cnblogs.com/cmxwt/p/6215253.html
粒子
public class student implements Comparable{
	public String name;
	public int age;
	构造
	stter/getter
	@override
	public int compareTo(Object o){
		return (this.name).compareTo((Student o).getName())
	}
} 

public static <T extends Comapreable> T min(List<T> T){
	T m =t.get(0);
	for(int i=0;i<t.size();i++){
		if((m.compareTo(t.get(i)))>0){
			m=t.get(i);
		}
	}

	return m;
}

public static void main(String [] args){
	Student[] ss={ new Stu1(),new Stu2()}
	List<Student> studentList=Arrays.asList(ss);
	Student minS=min(studentList);
	syso(minS.getName())
}



--------------
public Domain implement Comoparable<Domain>{
	private String string;
	构造
	settr/getter
	public int compareTo(Domain o){
		if(this.string.compareTo(o.getString())>0)
			return 1;
		else if(this.string.compareTo(o.getString())==0)
			return 1;
		else
			return 1;
	}
}


psvm(){
	Domain d1=new Domain("a");
	Domain d1=new Domain("b");
	syso(d1.compareTo(d2))
}

public class AbsComparator implement Comparator{
	public int compar(Objece o1,Object o2){
		int v1=Math.abs((Interger)o1.intValue())
		int v2=Math.abs((Integer)o2.intValue())
		retuen v1>v2?1:(v1==v2?0:-1)
	}
}

pevm(){
	Random rnd=new Random();
	Interger [] intergers=new Interger[20];
	for(int i=0;i<Intergers.length;i++){
		integers[i]=new Interger(rnd.nextInt(100)*(rnd.nextBoolean()?1:-1);
	}

	   Arrays.sort(integers);
	   System.out.println(Arrays.asList(integers));
        System.out.println("用AbsComparator排序：按绝对值大小排序");
        Arrays.sort(integers, new AbsComparator());
        System.out.println(Arrays.asList(integers));
}




Java集合系列：-----------06List的总结（LinkedList，ArrayList等使用场景和性能分析）
	(01) List 是一个接口，它继承于Collection的接口。它代表着有序的队列。
	(02) AbstractList 是一个抽象类，它继承于AbstractCollection。
		 AbstractList实现List接口中除size()、get(int location)之外的函数。
	(03) AbstractSequentialList 是一个抽象类，它继承于AbstractList。
		 AbstractSequentialList 实现了“链表中，根据index索引值操作链表的全部函数”。

	(04) ArrayList, LinkedList, Vector, Stack是List的4个实现类。
	ArrayList 是一个数组队列，相当于动态数组。它由数组实现，随机访问效率高，随机插入、随机删除效率低。
	LinkedList 是一个双向链表。它也可以被当作堆栈、队列或双端队列进行操作。LinkedList随机访问效率低，但随机插入、随机删除效率低。
	Vector 是矢量队列，和ArrayList一样，它也是一个动态数组，由数组实现。但是ArrayList是非线程安全的，而Vector是线程安全的。
	Stack 是栈，它继承于Vector。它的特性是：先进后出(FILO, First In Last Out)。

数组有下标索引
双向链表是前索引和后索引


第2部分 List使用场景
	学东西的最终目的是为了能够理解、使用它。下面先概括的说明一下各个List的使用场景，后面再分析原因

	如果涉及到“栈”、“队列”、“链表”等操作，应该考虑用List，具体的选择哪个List，根据下面的标准来取舍。
	(01) 对于需要快速插入，删除元素，应该使用LinkedList。
	(02) 对于需要快速随机访问元素，应该使用ArrayList
	(03) 对于“单线程环境” 或者 “多线程环境，
	     但List仅仅只会被单个线程操作”，此时应该使用非同步的类(如ArrayList)。
	     对于“多线程环境，且List可能同时被多个线程操作”，此时，应该使用同步的类(如Vector)


LinkedList和ArrayList性能差异分析
	在双向链表中找到要插入节点的位置index；找到之后，再插入一个新节点。
	ArrayList的容量，若容量不够，则增加容量

第4部分 Vector 和 ArrayList 比较
	相同
	1 它们都是List，它们都继承于AbstractList，并且实现List接口。
	2 它们都实现了RandomAccess和Cloneable接口
	3 它们都是通过数组实现的，本质上都是动态数组
	4 它们的默认数组容量是10
	5 它们都支持Iterator和listIterator遍历
	不同
	1 线程安全性不一样
	   ArrayList是非线程安全；
	   而Vector是线程安全的，它的函数都是synchronized的，即都是支持同步的。
	   ArrayList适用于单线程，Vector适用于多线程
	2 对序列化支持不同
	  ArrayList支持序列化，而Vector不支持；
	  即ArrayList有实现java.io.Serializable接口，而 Vector 没有实现该接口。
	3 构造函数个数不同
	  ArrayList有3个构造函数，而Vector有4个构造函数
	  Vector除了包括和ArrayList类似的3个构造函数之外，
	  另外的一个构造函数可以指定容量增加系数。

	4 容量增加方式不同
	  ArrayList容量不足时，“新的容量”=“(原始容量x3)/2 + 1”。

	  Vector的容量增长与“增长系数有关”，若指定了“增长系数”，且“增长系数有效(即，大于0)”；
	  “新的容量”=“原始容量+增长系数”
	  若增长系数无效(即，小于/等于0)，则“新的容量”=“原始容量 x 2”。

	5 对Enumeration的支持不同。Vector支持通过Enumeration去遍历，而List不支持






Java集合系列：-----------05LinkedList的底层实现
	ArrayList，并了解了fail-fast机制
	学习ArrayList一样，
	我们先对LinkedList有个整体认识，
	然后再学习它的源码；
	最后再通过实例来学会使用LinkedList

	第1部分 LinkedList介绍
	第2部分 LinkedList数据结构
	第3部分 LinkedList源码解析(基于JDK1.6.0_45)
	第4部分 LinkedList遍历方式
	第5部分 LinkedList示例

	LinkedList简介
		继承于AbstractSequentialList的双向链表。它也可以被当作堆栈、队列或双端队列进行操作
		实现 List 接口，能对它进行队列操作
		实现 Deque 接口，即能将LinkedList当作双端队列使用
		实现了Cloneable接口，即覆盖了函数clone()，能克隆
		实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输
		是非同步的

	LinkedList构造函数
		// 默认构造函数
		LinkedList()
		// 创建一个LinkedList，保护Collection中的全部元素。
		LinkedList(Collection<? extends E> collection)
	LinkedList的API 
		函数，方法
	父类
	AbstractSequentialList简介 
		双向链表的子类
		get/set/add/remove
		hasNext/next/hasPrevious/previous/index

	第2部分 LinkedList数据结构
		LinkedList的本质是双向链表。

		(01) LinkedList继承于AbstractSequentialList，并且实现了Dequeue接口。 
		(02) LinkedList包含两个重要的成员：header 和 size。
		header是双向链表的表头，它是双向链表节点所对应的类Entry的实例
			Entry中包含成员变量： previous, next, element
			previous是该节点的上一个节点，
			next是该节点的下一个节点，
			element是该节点所包含的值。 

		size是双向链表中节点的个数。

	LinkedList 的源码解析：

		LinkedList实际上是通过双向链表去实现的。
		既然是双向链表，
		那么它的顺序访问会非常高效，
		而随机访问效率比较低。


	总结：
	(01) LinkedList 实际上是通过双向链表去实现的。
		它包含一个非常重要的内部类：Entry。
		Entry是双向链表节点所对应的数据结构，
		它包括的属性有：当前节点所包含的值，
		上一个节点，下一个节点

	(02) 从LinkedList的实现方式中可以发现，它不存在LinkedList容量不足的问题。
	(03) LinkedList的克隆函数，即是将全部元素克隆到一个新的LinkedList对象中
	(04) LinkedList实现java.io.Serializable。
		当写入到输出流时，先写入“容量”，
		再依次写入“每一个节点保护的值”；
		当读出输入流时，先读取“容量”，
		再依次读取“每一个元素”。
	(05) 由于LinkedList实现了Deque，而Deque接口定义了在双端队列两端访问元素的方法。
		提供插入、移除和检查元素的方法。
		每种方法都存在两种形式：
		一种形式在操作失败时抛出异常，
		另一种形式返回一个特殊值（null 或 false，具体取决于操作）。
		插入    addFirst(e)    offerFirst(e)    addLast(e)        offerLast(e)
		移除    removeFirst()  pollFirst()      removeLast()    pollLast()
		检查    getFirst()     peekFirst()      getLast()        peekLast()
	(06) LinkedList可以作为FIFO(先进先出)的队列，作为FIFO的队列时，下表的方法等价
		队列方法       等效方法
		add(e)        addLast(e)
		offer(e)      offerLast(e)
		remove()      removeFirst()
		poll()        pollFirst()
		element()     getFirst()
		peek()        peekFirst()

	(07) LinkedList可以作为LIFO(后进先出)的栈，作为LIFO的栈时，下表的方法等价：
		栈方法        等效方法
		push(e)      addFirst(e)
		pop()        removeFirst()
		peek()       peekFirst()


	第4部分 LinkedList遍历方式
		(01) 第一种，通过迭代器遍历。即通过Iterator去遍历。
			for(Iterator iter = list.iterator(); iter.hasNext();)
			    iter.next();
		(02) 通过快速随机访问遍历LinkedList（不要用这种方式去遍历）
			for (int i=0; i<size; i++) 

		(03) 通过另外一种for循环来遍历LinkedList（可以用这种方式）
			for (Integer integ:list) 

		(04) 通过pollFirst()来遍历LinkedList
			while(list.pollFirst() != null)
		(05) 通过pollLast()来遍历LinkedList
			while(list.pollLast() != null)
		(06) 通过removeFirst()来遍历LinkedList
			 while(list.removeFirst() != null)
		(07) 通过removeLast()来遍历LinkedList
		 	while(list.removeLast() != null)

	removeFist()或removeLast()效率最高。但用它们遍历时，会删除原始数据；
	若单纯只读取，而不删除，应该使用第3种遍历方式。
	无论如何，千万不要通过随机访问去遍历LinkedList！
	强烈建立不要用第二种方式去遍历LinkedList。






Java集合系列：-----------04fail-fast总结（通过ArrayList来说明fail-fast的原理以及解决办法）
已经学习了ArrayList,ArrayList为例，对Iterator的fail-fast机制进行了解
1 fail-fast简介
2 fail-fast示例
3 fail-fast解决办法
4 fail-fast原理
5 解决fail-fast的原理

1 fail-fast简介
fail-fast 机制是java集合(Collection)中的一种错误机制。
当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。




Java集合系列：-----------03ArrayList源码分析 
	Collection的架构
	Collection的具体实现类进行讲解
	讲解List，而List中ArrayList又最为常用
	我们讲解ArrayList。先对ArrayList有个整体认识，
	再学习它的源码，最后再通过例子来学习如何使用它

	ArrayList 是一个数组队列，相当于 动态数组。
	与Java中的数组相比，它的容量能动态增长。
	它继承于AbstractList，实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。

	ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能
	ArrayList 实现了RandmoAccess接口，即提供了随机访问功能。
		RandmoAccess是java中用来被List实现，为List提供快速访问功能的。
		在ArrayList中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。
		稍后，我们会比较List的“快速随机访问”和“通过Iterator迭代器访问”的效率。

	ArrayList 实现了Cloneable接口，即覆盖了函数clone()，能被克隆
	ArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。


	和Vector不同，ArrayList中的操作不是线程安全的！所以，
	建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。

	ArrayList构造函数：
	ArrayList的API


第2部分 ArrayList数据结构
ArrayList包含了两个重要的对象：elementData 和 size
(01) elementData 是"Object[]类型的数组"，它保存了添加到ArrayList中的元素。
	实际上，elementData是个动态数组，我们能通过构造函数 ArrayList(int initialCapacity)来执行它的初始容量为initialCapacity
	如果通过不含参数的构造函数ArrayList()来创建ArrayList，则elementData的容量默认是10
	elementData数组的大小会根据ArrayList容量的增长而动态的增长

(02) size 则是动态数组的实际大小。

总结：
 通过一个数组去保存数据的,默认容量大小是10。
 新的容量=“(原始容量x3)/2 + 1”。
 克隆函数，即是将全部元素克隆到一个数组中。
 实现java.io.Serializable的方式。
	 先写入“容量”，再依次写入“每一个元素”,
	 先读取“容量”，再依次读取“每一个元素”。
ArrayList的遍历方式：
	(01) 第一种，通过迭代器遍历。即通过Iterator去遍历。
	(02) 第二种，随机访问，通过索引值去遍历。
	(03) 第三种，for循环遍历。如下：



Java集合系列：-----------07Map架构  
集合Collection和Map之间的关系
了解了Collection框架，我们再来了解一下Map架构
Conllection中的List结合，没有讲Collection中的Set集合，
因为Collection框架中的Set的实现类都是基于Map来实现的
(如，HashSet是通过HashMap实现的，TreeSet是通过TreeMap实现的)

(01) Map 是映射接口，Map中存储的内容是键值对(key-value)。
(02) AbstractMap 是继承于Map的抽象类，它实现了Map中的大部分API。其它Map的实现类可以通过继承AbstractMap来减少重复编码

(03) SortedMap 是继承于Map的接口。SortedMap中的内容是排序的键值对，排序的方法是通过比较器(Comparator)
(04) NavigableMap 是继承于SortedMap的接口。相比于SortedMap，NavigableMap有一系列的导航方法；
	 如"获取大于/等于某对象的键值对"、“获取小于/等于某对象的键值对”等等。

(05) TreeMap 继承于AbstractMap，且实现了NavigableMap接口；因此，TreeMap中的内容是“有序的键值对”！

(06) HashMap 继承于AbstractMap，但没实现NavigableMap接口；因此，HashMap的内容是“键值对，但不保证次序”！
(08) WeakHashMap 继承于AbstractMap。它和HashMap的键类型不同，WeakHashMap的键是“弱键”。

(07) Hashtable 虽然不是继承于AbstractMap，但它继承于Dictionary(Dictionary也是键值对的接口)
	，而且也实现Map接口；因此，Hashtable的内容也是“键值对，也不保证次序”。
	但和HashMap相比，Hashtable是线程安全的，而且它支持通过Enumeration去遍历。


先看抽象接口类
在对各个实现类进行详细之前，先来看看各个接口和抽象类的大致介绍
Map
Map.Entry
AbstractMap
SortedMap
NavigableMap
Dietionary

Map映射中不能包含重复的键；每个键最多只能映射到一个值
Map 接口提供三种collection 视图，键集、值集或键-值映射关系集
Map 映射顺序,可以明确保证其顺序，如 TreeMap；另一些映射实现则不保证顺序，如 HashMap 类
Map 的实现类应该提供2个“标准的”构造方法,无参构造，有参数构造


Map的API
	(01) Map提供接口分别用于返回 键集、值集或键-值映射关系集。
	        entrySet()用于返回键-值集的Set集合
	        keySet()用于返回键集的Set集合
	       values()用户返回值集的Collection集合

	(02) Map提供了“键-值对”、“根据键获取值”、“删除键”、“获取容量大小”等方法。

2:Map.Entry:
Map中内部的一个接口，Map.Entry是键值对

3;AbstractMap:
	AbstractMap类提供 Map 接口的骨干实现，以最大限度地减少实现此接口所需的工作。
	AbstractMap的API


SortedMap:
	SortedMap是一个继承于Map接口的接口。它是一个有序的SortedMap键值映射。
	自然排序 或者 用户指定比较器。 插入有序 SortedMap 的所有元素都必须实现 Comparable 接口
	SortedMap的API

5:NavigableMap
	NavigableMap是继承于SortedMap的接口。它是一个可导航的键-值对集合，
	NavigableMap分别提供了获取“键”、“键-值对”、“键集”、“键-值对集”的相关方法
	NavigableMap的API
	第1类，提供操作键-值对的方法。
	 lowerEntry、floorEntry、ceilingEntry 和 higherEntry 方法，
	 它们分别返回与小于、小于等于、大于等于、大于给定键的键关联的 Map.Entry 对象。
	 firstEntry、pollFirstEntry、lastEntry 和 pollLastEntry 方法，
	  它们返回和/或移除最小和最大的映射关系（如果存在），否则返回 null

 	第2类，提供操作键的方法	 
 	lowerKey、floorKey、ceilingKey 和 higherKey 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键。

 	第3类，获取键集。
 	navigableKeySet、descendingKeySet分别获取正序/反序的键集。
 	第4类，获取键-值对的子集。


Java集合系列：-----------02Collection架构

	队列 list 基于数组
	集合 set
	键值对Map

	Collection是和Map架构平级的

	List和Set都是接口，它们继承于Collection

	List是有序的队列，List中可以有重复的元素；
	而Set是数学概念中的集合，Set中没有重复元素

	AbstractCollection抽象类，它实现了Collection中的绝大部分函数
	AbstractList和AbstractSet都继承于AbstractCollection

	Collection中有一个iterator()函数，它的作用是返回一个Iterator接口
	我们通过Iterator迭代器来遍历集合
	ListIterator是List接口所特有的，在List接口中，通过ListIterator()返回一个ListIterator对象


	List是一个继承于Collection的接口，即List是集合中的一种。
	List是有序的队列，List中的每一个元素都有一个索引；
	第一个元素的索引值是0，往后的元素的索引值依次+1。
	和Set不同，List中允许有重复的元素。

	Set是一个继承于Collection的接口，
	即Set也是集合中的一种。
	Set是没有重复元素的集合。


	AbstractCollection是一个抽象类，它实现了Collection中除iterator()和size()之外的函数。
	AbstractCollection的主要作用：它实现了Collection接口中的大部分函数。
	从而方便其它类实现Collection，比如ArrayList、LinkedList等，
	它们这些类想要实现Collection接口，通过继承AbstractCollection就已经实现了大部分的接口了




Java集合系列：-----------01集合的整体框架
Interator--ListIterator
Collection
Queue--Dequeue
List
Set
AbstractCollection
AbstractCollection--AbstractList--Abstractset
AbstractSequentialList
LinkedList
ArrayList
Vector
Stack
SortedSet
NavigabletleMap
TreeMap
HashMap
WeakHashMap
HashTable
Directionary
Enumeration
Arrays
Collections

Java集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java集合工具包位置是java.util.*
Java集合主要可以划分为4个部分：List列表、Set集合、Map映射、工具类(Iterator迭代器、Enumeration枚举类、Arrays和Collections)、。
1 Collection是一个接口，是高度抽象出来的集合，它包含了集合的基本操作和属性。

  Collection包含了List和Set两大分支。
  (01) List是一个有序的队列，每一个元素都有它的索引。第一个元素的索引值是0。
          List的实现类有LinkedList, ArrayList, Vector, Stack。

  (02) Set是一个不允许有重复元素的集合。
          Set的实现类有HastSet和TreeSet。HashSet依赖于HashMap，它实际上是通过HashMap实现的；TreeSet依赖于TreeMap，它实际上是通过TreeMap实现的。

2 Map是一个映射接口，即key-value键值对。Map中的每一个元素包含“一个key”和“key对应的value”。

   AbstractMap是个抽象类，它实现了Map接口中的大部分API。而HashMap，TreeMap，WeakHashMap都是继承于AbstractMap。
   Hashtable虽然继承于Dictionary，但它实现了Map接口。

再看Iterator。它是遍历集合的工具，即我们通常通过Iterator迭代器来遍历集合。
我们说Collection依赖于Iterator，是因为Collection的实现类都要实现iterator()函数，返回一个Iterator对象。
ListIterator是专门为遍历List而存在的。

再看Enumeration，它是JDK 1.0引入的抽象类。作用和Iterator一样，也是遍历集合；
但是Enumeration的功能要比Iterator少。在上面的框图中，Enumeration只能在Hashtable, Vector, Stack中使用。

最后，看Arrays和Collections。它们是操作数组、集合的两个工具类。
有了上面的整体框架之后，我们接下来对每个类分别进行分析。



Java集合系列：-----------08HashMap的底层实现 




Java堆、栈和常量池以及相关String的详细讲解（经典中的经典） 
	http://www.cnblogs.com/shenxiaoquan/p/5941096.html 
	一：在JAVA中，有六个不同的地方可以存储数据： 
	1. 寄存器（register）。 这是最快的存储区，因为它位于不同于其他存储区的地方——处理器内部
	       ------最快的存储区, 由编译器根据需求进行分配
	2. 堆栈（stack）堆栈指针若向下移动，则分配新的内存；若向上移动，则释放那些 内存
		这是一种快速有效的分配存储方法，仅次于寄存器
		——特别是对象引用，但是JAVA对象不存储其 中。    
	3. 堆（heap）。一种通用性的内存池（也存在于RAM中），用于存放所以的JAVA对象
	------存放所有new出来的对象。
	4. 静态存储（static storage）。这里的“静态”是指“在固定的位置”
	------存放静态成员（static定义的）
	5. 常量存储（constant storage）
	------存放字符串常量和基本类型常量（public static final）
	6. 非RAM存储
	------硬盘等永久存储空间 就速度来说，有如下关系：
	    寄存器 >堆栈 > 堆 > 其它


Java中是否可以继承String类，为什么 
	public final class String implements java.io.Serializable, Comparable<String>, CharSequence 
	String类有final修饰符，而final修饰的类是不能被继承的

	1. 关于final修饰符
		final类不能被继承，没有子类，final类中的方法默认是final的
		final方法不能被子类的方法覆盖，但可以被继承。
		final成员变量表示常量，只能被赋值一次，赋值后值不再改变。 
		final不能用于修饰构造方法。 

	如果一个类不允许其子类覆盖某个方法，则可以把这个方法声明为final方法。
	　  使用final方法的原因有二： 
	　　第一、把方法锁定，防止任何继承类修改它的意义和实现。 
	　　第二、高效。编译器在遇到调用final方法时候会转入内嵌机制，大大提高执行效率。


	2. 关于String类
	3. 相关类： StringBuffer, StringBuilder
		String,StringBuffer与StringBuilder的区别 
		String StringBuilder StringBuffer 对比 总结得非常好 
		从源代码的角度聊聊java中StringBuffer、StringBuilder、String中的字符串拼接

		StringBuffer是线程安全的 
		StringBuilder(5.0版本后添加的类，是StringBuffer的一个简单替换)为非线程安全的，
		但是效率会好些，在单线程环境中要做大量字符串累加时推荐使用该类

深入理解Java的接口和抽象类 
对于面向对象编程来说，抽象是它的一大特征之一
可以通过两种形式来体现OOP的抽象：接口和抽象类
http://www.cnblogs.com/dolphin0520/p/3811437.html
	一.抽象类
　　二.接口
　　三.抽象类和接口的区别

三.抽象类和接口的区别
1.语法层面上的区别
	1）抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；

　　2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；

　　3）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；

　　4）一个类只能继承一个抽象类，而一个类却可以实现多个接口。

2.设计层面上的区别
　  1）抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。
	   抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。
	2）设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。
	   而接口是一种行为规范，它是一种辐射式设计。


Java线程池 
http://www.cnblogs.com/shenxiaoquan/p/5914843.html











