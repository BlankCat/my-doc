

java 内存模型
  JVM内存限制(最大值)
      JVM内存的最大值跟操作系统有很大的关系。
      简单的说就32位处理器虽然 可控内存空间有4GB,
      但是具体的操作系统会给一个限制，
      这个限制一般是2GB-3GB（一般来说Windows系统下为1.5G-2G，Linux系统 下为2G-3G），
      而64bit以上的处理器就不会有限制了


PC寄存器
方法栈
	栈帧
		操作数栈
		局部变量区

		本地方法栈
		方法区
		堆


java内存组成介绍：堆(Heap)和非堆(Non-heap)内存

Java 虚拟机具有一个堆，堆是运行时数据区域，所有类实例和数组的内存均从此处分配。堆是在 Java 虚拟机启动时创建的

在JVM中堆之外的内存称为非堆内存(Non-heap memory)

JVM主要管理两种类型的内存：堆和非堆。
堆就是Java代码可及的内存，是留给开发人员使用的；
非堆就是JVM留给 自己用的

所以
方法区、
JVM内部处理或优化所需的内存(如JIT编译后的代码缓存)、
每个类结构(如运行时常数池、字段和方法数据)以及方法和构造方法 的代码都在非堆内存中。

---------------------------
堆
	new对象，实例

非堆
	方法区
	java字节码代码缓存
	类结构
	常量池
	字段
	方法数据
	构造方法
---------------------------
堆
	java代码中所有的new操作

---------------------------

方法栈&本地方法栈:
	线程创建时产生,方法执行时生成栈帧

方法区
	存储类的元数据信息 常量等

native Memory(C heap)
	Direct Bytebuffer JNI Compile GC;




--------------------------------------------------------------
JVM管理的内存可以总体划分为两部分
		Heap Memory和Native Memory

		Heap Memory是供Java应用程序使用的；
		Native Memory 称为C-Heap，是供JVM自身进程使用的。

		Heap Memory及其内部各组成的大小可以通过JVM的一系列命令行参数来控制
		Native Memory没有相应的参数来控制大小，其大小依赖于操作系统进程的最大值
					（对于32位系统就是3~4G，各种系统的实现并不一样）
					以及生成的Java字节码大小、创建的线程数量、
					维持java对象的状态信息大小（用于GC）以及一些第三方的包，
					比如JDBC驱动使用的native内存。


		Native Memory里存些什么？

			1 管理java heap的状态数据（用于GC）;
			2 JNI调用，也就是Native Stack;
			3 JIT（即使编译器）编译时使用Native Memory，
				并且JIT的输入（Java字节码）和输出（可执行代码）
				也都是保存在Native Memory；
			4 NIO direct buffer。对于IBM JVM和Hotspot，
				都可以通过-XX:MaxDirectMemorySize来设置nio直接缓冲区的最大值。
				默认是64M。超过这个时，会按照32M自动增大。

			5 对于IBM的JVM某些版本实现，类加载器和类信息都是保存在Native Memory中的。



		DirectBuffer的好处
			DirectBuffer访问更快，避免了从HeapBuffer还需要从java堆拷贝到本地堆
			操作系统直接访问的是DirectBuffer。
			DirectBuffer对象的数据实际是保存在native heap中，
			但是引用保存在HeapBuffer中

			DirectBuffer的引用是直接分配在堆得Old区的，因此其回收时机是在FullGC时。
			因此，需要避免频繁的分配DirectBuffer，这样很容易导致Native Memory溢出。

		为什么会内存溢出？
			简单理解java process memory = java heap + native memory。

			内存溢出时，首先要区分是堆内存溢出还是本地内存溢出

			本地内存溢出
			Native Memory本质上就是因为耗尽了进程地址空间。
			对于HotSpot JVM来书，不断的分配直接内存，
			会导致如下错误信息：Allocated 1953546760 bytes of native memory before running out


--------------------------------------------------------------
内存使用情况--heap&PermGen
@ 表示通过jmap –heap pid 可以获取的值
# 表示通过jstat –gcutil pid 可以获取的值

内存使用情况—C heap
top or ps aux

jinfo 
	从一个给定的java进程或core文件或远程
	debug服务器上获取java配置信息
	jinfo –h 查询
	jmap -heap pid
jmap 
	运行中的jvm物理内存的占用情况
	SHELL jmap -histo pid>a.log可以将其保存到文本中去，
	在一段时间后，使用文本对比工具，可以对比出GC回收了哪些对象。
    参数很简单，直接查看jmap -h

jstack
	观察jvm中当前所有线程的运行情况和线程当前状态
	jstack -h
	jstack pid

jstat 
	 JVM监测工具(Java Virtual Machine Statistics Monitoring Tool)
	 利用了JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，
	 包括各种堆和非堆的大小及其内存使用量、classloader、compiler、垃圾回收状况等。

	 jstat –printcompilation -h10 3024 250 600
	 每250毫秒打印一次，一共打印600次 每隔10行显示一次head




记录一次OOM分析过程
https://www.cnblogs.com/huangfox/p/4354991.html
工具：
	jstat
	jmap
	jhat

1.jstat查看gc情况
	S0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used）
	EC、EU：Eden区容量和使用量
	OC、OU：年老代容量和使用量
	PC、PU：永久代容量和使用量
	YGC、YGT：年轻代GC次数和GC耗时
	FGC、FGCT：Full GC次数和Full GC耗时
	GCT：GC总耗时

http://www.blogjava.net/hankchen/archive/2012/05/09/377736.html
Java内存模型是描述Java程序中各变量（实例域、静态域和数组元素）之间的关系，
以及在实际计算机系统中将变量存储到内存和从内存取出变量这样的低层细节

在Java虚拟机中，内存分为三个代：
新生代（New）、老生代（Old）、永久代（Perm）。

（1）新生代New：新建的对象都存放这里
（2）老生代Old：存放从新生代New中迁移过来的生命周期较久的对象。

				新生代New和老生代Old共同组成了堆内存。

（3）永久代Perm：是非堆内存的组成部分。
				 主要存放加载的Class类级对象如class本身，
				 method，field等等。

java.lang.OutOfMemoryError: Java heap space异常 说明java 虚拟机 堆内存不够。

（1）Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。

（2）代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。
java.lang.OutOfMemoryError: PermGen space，说明是Java虚拟机对永久代Perm内存设置不够。

故障排查
		总结下排查内存故障的方法和技巧有哪些：
		1、top命令：Linux命令。可以查看实时的内存使用情况。
		2、jmap -histo:live [pid]，然后分析具体的对象数目和占用内存大小，从而定位代码。
		3、jmap -dump:live,format=b,file=xxx.xxx [pid]，然后利用MAT工具分析是否存在内存泄漏等等。

		堆内存
		栈内存

		jvm参数

		经验不在于年限，在于积累---专注互联网软件开发
		把工作当事业做，把项目当作品做！
		http://www.blogjava.net/hankchen/archive/2012/05/09/377736.html

		一个性能较好的web服务器jvm参数配置：
		http://www.blogjava.net/hello-yun/archive/2015/07/19/426314.html
		http://blog.csdn.net/jeffreynicole/article/details/46953059 

		[plain] view plaincopy
		-server //服务器模式  
		-Xmx2g //JVM最大允许分配的堆内存，按需分配  
		-Xms2g //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。  
		-Xmn256m //年轻代内存大小，整个JVM内存=年轻代 + 年老代 + 持久代  
		-XX:PermSize=128m //持久代内存大小  
		-Xss256k //设置每个线程的堆栈大小  
		-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC  
		-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器  
		-XX:+CMSParallelRemarkEnabled //降低标记停顿  
		-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩  
		-XX:LargePageSizeInBytes=128m //内存页的大小  
		-XX:+UseFastAccessorMethods //原始类型的快速优化  
		-XX:+UseCMSInitiatingOccupancyOnly //使用手动定义初始化定义开始CMS收集  
		-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集  

		常见命令
		$ jps 
		1、查看所有参数 jinfo -flags pid
			$ jinfo -flags pid
			$ jinfo -flags 22869
		3、jmap -heap pid 查看目前堆情况
			$ jmap -heap pid
			$ jmap -heap 22869

		4、jmap -histo:live pid | head -7 查看对象分布

		 jmap -histo:live 997 | head -7
		 num     #instances         #bytes  class name
		----------------------------------------------
		   1:         50518        7385056  <constMethodKlass>
		   2:         50518        6881072  <methodKlass>
		   3:          4513        4904360  <constantPoolKlass>
		   4:         76670        3923632  <symbolKlass>

		（*****）
		http://www.blogjava.net/hankchen
		ps -ef | grep 4038


		jmap命令有下面几种常用的用法：
		•jmap [pid]
		•jmap -histo:live [pid] >a.log
		•jmap -dump:live,format=b,file=xxx.xxx [pid]


		-----------------------------------------


$uname -a
$ free -m
$ jstat -gcutil 23959 1000






JVM参数设置、分析
https://www.cnblogs.com/jianyungsun/p/6911380.html

JVM参数含义
参数名称 | 含义 | 	默认值 | 解释
-Xms | 	初始堆大小 | 物理内存的1/64(<1GB) | 默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增
-Xmx | 最大堆大小  | 物理内存的1/4(<1GB)  | 默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少
-Xmn | 年轻代大小(1.4or lator) | | 注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。
									整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.
									增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐

-XX:NewSize | 设置年轻代大小(for 1.3/1.4)
-XX:MaxNewSize |  年轻代最大值(for 1.3/1.4)

-XX:PermSize | 设置持久代(perm gen)初始值 | 物理内存的1/64
-XX:MaxPermSize | 	设置持久代最大值 | 物理内存的1/4


-Xss | 	每个线程的堆栈大小 | JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.
								更具应用的线程所需内存大小进行 调整.在相同物理内存下,
								减小这个值能生成更多的线程.
								但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,
								经验值在3000~5000左右
								一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。
								这个选项对性能影响比较大，需要严格的测试。（校长）
								和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:"”
								-Xss is translated in a VM flag named ThreadStackSize”
								一般设置这个值就可以

-XX:ThreadStackSize | 	Thread Stack Size

-XX:NewRatio | 年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代) | -XX:NewRatio=4表示年轻代与年老代所占比值为1:4,
																			年轻代占整个堆栈的1/5
																			Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。



-XX:SurvivorRatio | Eden区与Survivor区的大小比值 | 设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10

-XX:LargePageSizeInBytes | 内存页的大小不可设置过大， 会影响Perm的大小 | 	=128m

-XX:+UseFastAccessorMethods | 	原始类型的快速优化

XX:+DisableExplicitGC | 关闭System.gc() | 这个参数需要严格的测试
-XX:MaxTenuringThreshold |  垃圾最大年龄 | 如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 
											对于年老代比较多的应用,可以提高效率.
											如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,
											这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率
											该参数只有在串行GC时才有效.


-XX:+AggressiveOpts | 加快编译

-XX:+UseBiasedLocking |  锁机制的性能改善

-Xnoclassgc | 	禁用垃圾回收

-XX:SoftRefLRUPolicyMSPerMB | 每兆堆空闲空间中SoftReference的存活时间 | 1s

-XX:PretenureSizeThreshold | 对象超过多大是直接在旧生代分配 | 0	| 单位字节 新生代采用Parallel Scavenge GC时无效
																	另一种直接在旧生代分配的情况是大的数组对象,
																	且数组中无外部引用对象
-XX:TLABWasteTargetPercent	TLAB占eden区的百分比	1%	 
-XX:+CollectGen0First	FullGC时是否先YGC	false



---------------------
并行收集器相关参数



XX:+UseParallelGC	Full GC采用parallel MSC 	
												选择垃圾收集器为并行收集器.此配置仅对年轻代有效.即上述配置下,
												年轻代使用并发收集,而年老代仍旧使用串行收集.(此项待验证)

-XX:+UseParNewGC	设置年轻代为并行收集	 	可与CMS收集同时使用
												JDK5.0以上,JVM会根据系统配置自行设置,所以无需再设置此值

-XX:ParallelGCThreads	并行收集器的线程数	 	此值最好配置与处理器数目相等 同样适用于CMS

-XX:+UseParallelOldGC	年老代垃圾收集方式为并行收集(Parallel Compacting)	 	这个是JAVA 6出现的参数选项

-XX:MaxGCPauseMillis	每次年轻代垃圾回收的最长时间(最大暂停时间)	 	如果无法满足此时间,JVM会自动调整年轻代大小,以满足此值.

-XX:+UseAdaptiveSizePolicy	自动选择年轻代区大小和相应的Survivor区比例	 		
										设置此选项后,并行收集器会自动选择年轻代区大小和相应的Survivor区比例,
										以达到目标系统规定的最低相应时间或者收集频率等,此值建议使用并行收集器时,一直打开.
-XX:GCTimeRatio	设置垃圾回收时间占程序运行时间的百分比	 	公式为1/(1+n)
-XX:+ScavengeBeforeFullGC	Full GC前调用YGC	true	Do young generation GC prior to a full GC. (Introduced in 1.4.1.)

---------------------
CMS相关参数

XX:+UseConcMarkSweepGC	使用CMS内存收集	 	测试中配置这个以后,-XX:NewRatio=4的配置失效了,原因不明.所以,此时年轻代大小最好用-Xmn设置.???

-XX:+AggressiveHeap	 	 	试图是使用大量的物理内存
							长时间大内存使用的优化，能检查计算资源（内存， 处理器数量）
							至少需要256MB内存
							大量的CPU／内存， （在1.4.1在4CPU的机器上已经显示有提升）

-XX:CMSFullGCsBeforeCompaction	多少次后进行内存压缩	 	由于并发收集器不对内存空间进行压缩,整理,所以运行一段时间以后会产生"碎片",
															使得运行效率降低.此值设置运行多少次GC以后对内存空间进行压缩,整理.

-XX:+CMSParallelRemarkEnabled	降低标记停顿	 	 
-XX+UseCMSCompactAtFullCollection	在FULL GC的时候， 对年老代的压缩	 	CMS是不会移动内存的， 因此， 这个非常容易产生碎片， 
																			导致内存不够用， 因此， 内存的压缩这个时候就会被启用。 
																			增加这个参数是个好习惯。
																			可能会影响性能,但是可以消除碎片

-XX:+UseCMSInitiatingOccupancyOnly	使用手动定义初始化定义开始CMS收集	 	禁止hostspot自行触发CMS GC

-XX:CMSInitiatingOccupancyFraction=70	使用cms作为垃圾回收
										使用70％后开始CMS收集	92	为了保证不出现promotion failed(见下面介绍)错误,
										该值的设置需要满足以下公式CMSInitiatingOccupancyFraction计算公式

-XX:CMSInitiatingPermOccupancyFraction	设置Perm Gen使用到达多少比率时触发	92	

-XX:+CMSIncrementalMode	设置为增量模式	 	用于单CPU情况

-XX:+CMSClassUnloadingEnabled





辅助信息

-XX:+PrintGC	 	 	
									输出形式:
									[GC 118250K->113543K(130112K), 0.0094143 secs]
									[Full GC 121376K->10414K(130112K), 0.0650971 secs]


-XX:+PrintGCDetails	 	 	
									输出形式:[GC [DefNew: 8614K->781K(9088K), 0.0123035 secs] 118250K->113543K(130112K), 0.0124633 secs]
									[GC [DefNew: 8614K->8614K(9088K), 0.0000665 secs][Tenured: 112761K->10414K(121024K), 0.0433488 secs]
									 121376K->10414K(130112K), 0.0436268 secs]

-XX:+PrintGCTimeStamps	 	 	 

-XX:+PrintGC:PrintGCTimeStamps	 	 	可与-XX:+PrintGC -XX:+PrintGCDetails混合使用
										输出形式:11.851: [GC 98328K->93620K(130112K), 0.0082960 secs]

-XX:+PrintGCApplicationStoppedTime	
										打印垃圾回收期间程序暂停的时间.可与上面混合使用	 	输出形式:Total time for which application threads were stopped: 0.0468229 seconds
-XX:+PrintGCApplicationConcurrentTime	打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用	 	
										输出形式:Application time: 0.5291524 seconds
-XX:+PrintHeapAtGC	打印GC前后的详细堆栈信息	 	 
-Xloggc:filename	把相关日志信息记录到文件以便分析.
					与上面几个配合使用	 	 
-XX:+PrintClassHistogram
				garbage collects before printing the histogram.	 	 
				-XX:+PrintTLAB	查看TLAB空间的使用情况	 	 
				XX:+PrintTenuringDistribution	查看每次minor GC后新的存活周期的阈值	 	
				Desired survivor size 1048576 bytes, new threshold 7 (max 15)
				new threshold 7即标识新的存活周期的阈值为7。

GC性能方面的考虑
























