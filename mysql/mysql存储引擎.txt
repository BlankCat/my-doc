


mysql 存储引擎
MYSQL: INNODB 还是 MYISAM?
https://coolshell.cn/articles/652.html
--------------------------------------------
下面先让我们回答一些问题：
你的数据库有外键吗？
你需要事务支持吗？
你需要全文索引吗？
你经常使用什么样的查询模式？
你的数据有多大？

如果你需要事务处理或是外键，那么InnoDB 可能是比较好的方式。
如果你需要全文索引，那么通常来说 MyISAM是好的选择，

因为这是系统内建的，然而，我们其实并不会经常地去测试两百万行记录
就算是慢一点，我们可以通过使用Sphinx从InnoDB中获得全文索引



数据大小，数据恢复，数据安全

数据的大小，是一个影响你选择什么样存储引擎的重要因素，
大尺寸的数据集趋向于选择InnoDB方式，
因为其支持事务处理和故障恢复。
数据库的在小决定了故障恢复的时间长短，
InnoDB可以利用事务日志进行数据恢复，这会比较快。
而MyISAM可能会需要几个小时甚至几天来干这些事，
InnoDB只需要几分钟。

InnoDB恢复比较块
MyISAM恢复比较慢

您操作数据库表的习惯可能也会是一个对性能影响很大的因素

COUNT() 在 MyISAM 表中会非常快，
而在InnoDB 表下可能会很痛苦

而主键查询则在InnoDB下会相当相当的快，
但需要小心的是如果我们的主键太长了也会导致性能问题

大批的inserts 语句在MyISAM下会快一些，
但是updates 在InnoDB 下会更快一些——尤其在并发量大的时候。




到底你检使用哪一个呢？
根据经验来看，如果是一些小型的应用或项目，那么MyISAM 也许会更适合
在大型的环境下使用MyISAM 也会有很大成功的时候，
但却不总是这样的。
如果你正在计划使用一个超大数据量的项目

而且需要事务处理或外键支持，那么你真的应该直接使用InnoDB方式。
但需要记住InnoDB 的表需要更多的内存和存储，
转换100GB 的MyISAM 表到InnoDB 表可能会让你有非常坏的体验。




看你的mysql现在已提供什么存储引擎:
show engines;

看你的mysql当前默认的存储引擎:
show variables like '%storage_engine%';


你要看某个表用了什么引擎
(在显示结果里参数engine后面的就表示该表当前用的存储引擎):
show create table 表名;
show create table cas_user;

--------------------------------------------


MyIsam和InnoDB的区别
个人见解：
1.最主要的差别就是Innodb 支持事务处理与外键和行级锁.而MyISAM不支持
所以有用到事务处理和外键的，要用Innodb

2. InnoDB 中不保存表的具体行数，也就是说，
执行select count(*) from table时，
InnoDB要扫描一遍整个表来计算有多少行
但如果带有where ，两种的查询方式就一样了【所以这点区别不大】


3.稳定性，方便的扩展性和高可用性来说的话，MyISAM比较好

4.写入和修改操作，Innodb性能比较好。查询操作，MyISAM更好


注意：最近实际测试，myisam的写入速度比innodb的快
1.6w的数据，
1.从innodb类型表里转移到myisam类型表用时48秒（期间有些过滤处理）；
2.从myisam类型表里转移到myisam类型表里33秒；
3.从myisam类型表或innodb类型表里转移到innodb类型表，33分钟左右。



白话讲MyIsam和InnoDB的区别
"MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持"
MyISAM和InnoDB的解释,很抽象吧,我们用白话的方式解释一下

所谓事务处理，就是原子性操作。
打个比方，支持事务处理的Innodb表，建设一个中，
发帖是给积分的。你发了一个帖子执行一个insert语句，来插入帖子内容，
插入后就要执行一个update语句来增加你的积分。
假设一种特殊情况突然发生，insert成功了，update操作却没有被执行。
也就是说你发了帖子却没有增加相应的积分。这就会造成用户不满。
如果使用了事务处理，insert和update都放入到事务中去执行，这个时候，
只有当insert和update两条语句都执行生成的时候才会将数据更新、写入到中，
如果其中任何一条语句失败，那么就会回滚为初始状态，不执行写入。
这样就保证了insert和update肯定是一同执行的。

发贴送积分就是一个事务操作

mysiam表不支持事务处理，同时mysiam表不支持外键。
外键不用说了吧？不知道的话，去网上查吧。
同时，在执行数据库写入的操作（insert,update,delete）的时候，mysiam表会锁表，
而innodb表会锁行。通俗点说，就是你执行了一个update语句，
那么mysiam表会将整个表都锁住，其他的insert和delete、update都会被拒之门外，
等到这个update语句执行完成后才会被依次执行。

锁表
 

而锁行，就是说，你执行update语句是，只会将这一条记录进行锁定，
只有针对这条记录的其他写入、
更新操作会被阻塞并等待这条update语句执行完毕后再执行，
针对其他记录的写入操作不会有影响。

锁行


因此，当你的数据库有大量的写入、更新操作而查询比较少或者数据完整性要求比较高的时候就选择innodb表。
当你的数据库主要以查询为主，相比较而言更新和写入比较少，

并且业务方面数据完整性要求不那么严格，就选择mysiam表。
因为mysiam表的查询操作效率和速度都比innodb要快

一个重查询
一个重事务增删改

InnoDB与Myisam的六大区别
构成上的区别：
	MyISAM
		每个MyISAM在磁盘上存储成三个文件。
		第一个文件的名字以表的名字开始，
		扩展名指出文件类型。
		.frm文件存储表定义。
		数据文件的扩展名为.MYD (MYData)。
		索引文件的扩展名是.MYI (MYIndex)。
		 
	InnoDB
		基于磁盘的资源是InnoDB表空间数据文件和它的日志文件，
		InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB

事务处理上方面:
	MyISAM
		MyISAM类型的表强调的是性能，
		其执行数度比InnoDB类型更快，
		但是不提供事务支持

	InnoDB
		InnoDB提供事务支持事务，
		外部键等高级数据库功能

SELECT   UPDATE,INSERT，Delete操作
	MyISAM
		如果执行大量的SELECT，MyISAM是更好的选择
	InnoDB
		1.如果你的数据执行大量的INSERT或UPDATE，
		出于性能方面的考虑，应该使用InnoDB表
  		2.DELETE   FROM table时，InnoDB不会重新建立表，而是一行一行的删除。
  		3.LOAD   TABLE FROM MASTER操作对InnoDB是不起作用的，
  		解决方法是首先把InnoDB表改成MyISAM表，
  		导入数据后再改成InnoDB表，
  		但是对于使用的额外的InnoDB特性（例如外键）的表不适用

对AUTO_INCREMENT的操作
	MyISAM
	 	每表一个AUTO_INCREMEN列的内部处理。
  		MyISAM为INSERT和UPDATE操作自动更新这一列。
  		这使得AUTO_INCREMENT列更快（至少10%）。
  		在序列顶的值被删除之后就不能再利用。
  		(当AUTO_INCREMENT列被定义为多列索引的最后一列，
  		可以出现重使用从序列顶部删除的值的情况）。

  		AUTO_INCREMENT值可用ALTER TABLE或myisamch来重置

  		对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，
  		但是在MyISAM表中，可以和其他字段一起建立联合索引
  		更好和更快的auto_increment处理

	InnoDB
		 如果你为一个表指定AUTO_INCREMENT列，
		 在数据词典里的InnoDB表句柄包含一个名为自动增长计数器的计数器，
		 它被用在为该列赋新值。

  		自动增长计数器仅被存储在主内存中，而不是存在磁盘上

  		关于该计算器的算法实现，请参考
  		AUTO_INCREMENT列在InnoDB里如何工作

表的具体行数
	MyISAM
		 select count(*) from table,
		 MyISAM只要简单的读出保存好的行数，
		 注意的是，当count(*)语句包含   where条件时，
		 两种表的操作是一样的

	InnoDB
		InnoDB 中不保存表的具体行数，也就是说，
		执行select count(*) from table时，
		InnoDB要扫描一遍整个表来计算有多少行


 锁
 	MyISAM
 		表锁

 	InnoDB
 		 提供行锁(locking on row level)，
 		 提供与 Oracle 类型一致的不加锁读取
 		 (non-locking read in SELECTs)，另外，

 		 InnoDB表的行锁也不是绝对的，
 		 如果在执行一个SQL语句时MySQL不能确定要扫描的范围，
 		 InnoDB表同样会锁全表，
 		 例如update table set num=1 where name like “%aaa%”


实例讲解

两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁.
而MyISAM不支持.所以MyISAM往往就容易被人认为只适合在小项目中使用

我作为使用MySQL的用户角度出发，
Innodb和MyISAM都是比较喜欢的，
但是从我目前运维的数据库平台要达到需求：
99.9%的稳定性，方便的扩展性和高可用性来说的话，
MyISAM绝对是我的首选。


原因如下：
读写角度
1、首先我目前平台上承载的大部分项目是读多写少的项目，
	而MyISAM的读性能是比Innodb强不少的。

索引和数据角度
2、MyISAM的索引和数据是分开的，
	并且索引是有压缩的，
	内存使用率就对应提高了不少。
	能加载更多索引，
	而Innodb是索引和数据是紧密捆绑的，
	没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。

平台角度，数据库操作错误，数据备份还原
3、从平台角度来说，
	经常隔1，2个月就会发生应用开发人员不小心update一个表where写的范围不对，
	导致这个表没法正常用了，这个时候MyISAM的优越性就体现出来了，
	随便从当天拷贝的压缩包取出对应表的文件，随便放到一个数据库目录下，
	然后dump成sql再导回到主库，
	并把对应的binlog补上。

	如果是Innodb，恐怕不可能有这么快速度，
	别和我说让Innodb定期用导出xxx.sql机制备份，
	因为我平台上最小的一个数据库实例的数据量基本都是几十G大小。


从业务角度，什么操作语句比较多
select
4、从我接触的应用逻辑来说，
	select count(*) 和order by 是最频繁的，
	大概能占了整个sql总语句的60%以上的操作，

	而这种操作Innodb其实也是会锁表的，
	很多人以为Innodb是行级锁，
	那个只是where对它主键是有效，
	非主键的都会锁全表的。

5、还有就是经常有很多应用部门需要我给他们定期某些表的数据，
	MyISAM的话很方便，
	只要发给他们对应那表的frm.MYD,MYI的文件，
	让他们自己在对应版本的数据库启动就行，

	而Innodb就需要导出xxx.sql了，
	因为光给别人文件，受字典数据文件的影响，
	对方是无法使用的。



6、如果和MyISAM比insert写操作的话，
	Innodb还达不到MyISAM的写性能，
	如果是针对基于索引的update操作，
	虽然MyISAM可能会逊色Innodb,
	但是那么高并发的写，
	从库能否追的上也是一个问题，
	还不如通过多实例分库分表架构来解决。


merge引擎
一. 什么是MERGE引擎
MERGE存储引擎把一组MyISAM数据表当做一个逻辑单元来对待，让我们可以同时对他们进行查询。
7、如果是用MyISAM的话，
	merge引擎可以大大加快应用部门的开发速度，
	他们只要对这个merge表做一些select count(*)操作，
	非常适合大项目总量约几亿的rows某一类型(如日志，调查统计)的业务表。

	当然Innodb也不是绝对不用，
	用事务的项目如模拟炒股项目，我就是用Innodb的，
	活跃用户20多万时候，也是很轻松应付了，
	因此我个人也是很喜欢Innodb的，
	只是如果从数据库平台应用出发，
	我还是会首选MyISAM。


总结
可能有人会说你MyISAM无法抗太多写操作，
但是我可以通过架构来弥补，
说个我现有用的数据库平台容量：
主从数据总量在几百T以上，每天十多亿 pv的动态页面，
还有几个大项目是通过数据接口方式调用未算进pv总数，
(其中包括一个大项目因为初期memcached没部署,导致单台数据库每天处理 9千万的查询)。而我的整体数据库服务器平均负载都在0.5-1左右。

 























