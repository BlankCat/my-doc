


数据库性能优化
回答这个问题从四个方面去解答，
如何设计数据库？
数据库如何提高查询性能？
什么样的操作会影响数据库的查询性能？
怎样去避免？

1整个应用的性能瓶颈，尤其是web应用
2DBA担心的事情，
3数据库表结构设计，查询sql关注性能

1. 为查询缓存优化你的查询
	mysql开启查询缓存，mysql数据库引擎
	多次查询把查询结果放入一个缓存，后续操作
	相同的查询就直接访问缓存结果

注意
	sql查询缓存对mysql的函数不起作用，
	需要提取变量来替代函数
	CURDATE() 
	NOW() 
	RAND() 

2. EXPLAIN 你的 SELECT 查询
	EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，
	你的数据表是如何被搜索和排序的……
	EXPLAIN SELECT * FROM cas_account
	EXPLAIN SELECT * FROM cas_user
	显示查询多少行，查看rows列可以让我们找到潜在的性能问题

3. 当只要一行数据时使用 LIMIT 1
	第一条中是Select *，第二条是Select 1
	没有效率的：
	SELECT * FROM user WHERE country = 'China'
	有效的，查询用户是否存在
	SELECT 1 FROM cas_account WHERE username="yangjuanjuan12345" LIMIT 1

4. 为搜索字段建索引
	特别是like语句的哪个字段一定要添加索引
	username 添加索引
	SELECT count(*) FROM cas_user WHERE username LIKE "li%"
	MySQL全文索引 或是自己做一个索引（比如说：搜索关键词或是Tag什么的）
	https://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html

5. 在Join表的时候使用相当类型的例，并将其索引
	 JOIN 查询，确认两个表中Join的字段是被建过索引的
	 MySQL内部会启动为你优化Join的SQL语句的机制

	 被用来Join的字段，应该是相同的类型的
	 把 DECIMAL 字段和一个 INT 字段Join在一起
	 MySQL就无法使用它们的索引。
	 字符集采用utf-8
	 对于那些STRING类型，还需要有相同的字符集才行 （两个表的字符集有可能不一样）


6. 千万不要 ORDER BY RAND()
	想打乱返回的数据行？随机挑一个数据？
	但你确不了解这样做有多么可怕的性能问题
	这样使用只让你的数据库的性能呈指数级的下降

	MySQL会不得不去执行RAND()函数（很耗CPU时间）
	而且这是为了每一行记录去记行，然后再对其排序
	就算是你用了Limit 1也无济于事（因为要排序）

	随机查询一条记录
	// 千万不要这样做：
	$r = mysql_query("SELECT username FROM user ORDER BY RAND() LIMIT 1");
	 
	// 这要会更好：
	$r = mysql_query("SELECT count(*) FROM user");
	$d = mysql_fetch_row($r);
	$rand = mt_rand(0,$d[0] - 1);
	$r = mysql_query("SELECT username FROM user LIMIT $rand, 1");

	查询有多少行，行数中取出一个随机取
	然后再去查询

7. 避免 SELECT *
	从数据库里读出越多的数据，那么查询就会变得越慢
	数据库服务器和WEB服务器是两台独立的服务器的话，
	这还会增加网络传输的负载。

	// 不推荐
	$r = mysql_query("SELECT * FROM user WHERE user_id = 1");
	$d = mysql_fetch_assoc($r);
	echo "Welcome {$d['username']}";
	 
	// 推荐
	$r = mysql_query("SELECT username FROM user WHERE user_id = 1");
	$d = mysql_fetch_assoc($r);
	echo "Welcome {$d['username']}";


8. 永远为每张表设置一个ID
	每张表都设置一个ID做为其主键，
	而且最好的是一个INT型的（推荐使用UNSIGNED），
	并设置上自动增加的AUTO_INCREMENT标志。


	users 表有一个主键叫 “email”的字段，
	你也别让它成为主键。
	使用 VARCHAR 类型来当主键会使用得性能下降
	你应该使用表的ID来构造你的数据结构。

	在MySQL数据引擎下，还有一些操作需要使用主键
	集群，分区……

	只有一个情况是例外，那就是“关联表”的“外键”
	这个表的主键，通过若干个别的表的主键构成。
	我们把这个情况叫做“外键”


9. 使用 ENUM 而不是 VARCHAR
	ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT
	但其外表上显示为字符串。这样一来，
	用这个字段来做一些选项列表变得相当的完美。

	比如“性别”，“国家”，“民族”，“状态”或“部门”，
	你知道这些字段的取值是有限而且固定的，
	那么，你应该使用 ENUM 而不是 VARCHAR。



10. 从 PROCEDURE ANALYSE() 取得建议
	怎么去重新组织你的表结构
	PROCEDURE ANALYSE() 会让 MySQL 帮你去分析你的字段和其实际的数据，
	并会给你一些有用的建议
	只有表中有实际的数据，这些建议才会变得有用，
	因为要做一些大的决定是需要有数据作为基础的。

	如果你创建了一个 INT 字段作为你的主键，
	然而并没有太多的数据，那么，
	PROCEDURE ANALYSE()会建议你把这个字段的类型改成 MEDIUMINT 

	你使用了一个 VARCHAR 字段，因为数据不多，
	你可能会得到一个让你把它改成 ENUM 的建议


11. 尽可能的使用 NOT NULL
	除非你有一个很特别的原因去使用 NULL 值，
	你应该总是让你的字段保持 NOT NULL

	问问你自己“Empty”和“NULL”有多大的区别（如果是INT，那就是0和NULL）？
	你觉得它们之间没有什么区别，那么你就不要使用NULL。
	在 Oracle 里，NULL 和 Empty 的字符串是一样的

	不要以为 NULL 不需要空间，其需要额外的空间，
	并且，在你进行比较的时候，你的程序会更复杂


12. Prepared Statements
	Prepared Statements很像存储过程，是一种运行在后台的SQL语句集合
	prepared statements 获得很多好处，无论是性能问题还是安全问题。

	在性能方面，当一个相同的查询被使用多次的时候，这会为你带来可观的性能优势
	Prepared Statements定义一些参数，而MySQL只会解析一次

	PHP中要使用prepared statements
	// 创建 prepared statement
	if ($stmt = $mysqli->prepare("SELECT username FROM user WHERE state=?")) {
	 
	    // 绑定参数
	    $stmt->bind_param("s", $state);
	 
	    // 执行
	    $stmt->execute();
	 
	    // 绑定结果
	    $stmt->bind_result($username);
	 
	    // 移动游标
	    $stmt->fetch();
	 
	    printf("%s is from %s\n", $username, $state);
	 
	    $stmt->close();
	}


13. 无缓冲的查
	sql脚本执行sql语句时候，
	mysql_unbuffered_query() 发送一个SQL语句
	到MySQL而并不像mysql_query()一样去自动fethch和缓存结果。
	这会相当节约很多可观的内存，尤其是那些会产生大量结果的查询语句
	，你不需要等到所有的结果都返回，只需要第一行数据返回的时候，
	你就可以开始马上开始工作于查询结果了


	进行下一次的查询前调用 mysql_free_result() 清除结果。
	而且， mysql_num_rows() 或 mysql_data_seek() 将无法使用



14. 把IP地址存成 UNSIGNED INT
	很多程序员都会创建一个 VARCHAR(15) 字段
	来存放字符串形式的IP而不是整形的IP

	你用整形来存放，只需要4个字节，并且你可以有定长的字段
	这会为你带来查询上的优势，
	尤其是当你需要使用这样的WHERE条件：
	IP between ip1 and ip2


	将ip字符串存成int整形
	也有这样的函数 ip2long() 和 long2ip()。
	你可以使用 INET_ATON() 来把一个字符串IP转成一个整形，
	并使用 INET_NTOA() 把一个整形转成一个字符串IP
	$r = "UPDATE users SET ip = INET_ATON('{$_SERVER['REMOTE_ADDR']}') 
	WHERE user_id = $user_id";



15. 固定长度的表会更快
	表中的所有字段都是“固定长度”的，
	整个表会被认为是 “static” 或 “fixed-length”

	表中没有如下类型的字段： 
	VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，
	那么这个表就不是“固定长度静态表”了


	固定长度的表会提高性能，因为MySQL搜寻得会更快一些
	因为这些固定的长度是很容易计算下一个数据的偏移量的，
	所以读取的自然也会很快。
	而如果字段不是定长的。每一次要找下一条的话，需要程序找到主键。

	固定长度的表也更容易被缓存和重建

	弊端
	唯一的副作用是，固定长度的字段会浪费一些空间，
	因为定长的字段无论你用不用，
	他都是要分配那么多的空间


16. 垂直分割
	“垂直分割”是一种把数据库中的表按列变成几张表的方法，
	这样可以降低表的复杂度和字段的数目，从而达到优化的目的

	例如
	在银行做过项目，见过一张表有100多个字段，很恐怖


	用户相关的表,暗夜业务，记住不要经常去join他们
	账号表 account
	用户表 user
	用户额外信息表 user_extr


17. 拆分大的 DELETE 或 INSERT 语句
	锁表，什么操作造成锁表

	在线的网站上去执行一个大的 DELETE 或 INSERT 查询，
	你需要非常小心，要避免你的操作让你的整个网站停止相应
	因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了


	Apache 会有很多的子进程或线程。所以，
	其工作起来相当有效率，
	而我们的服务器也不希望有太多的子进程，线程和数据库链接，
	这是极大的占服务器资源的事情，尤其是内存

	你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，
	这30秒所积累的访问进程/线程，数据库链接，打开的文件数，
	可能不仅仅会让你泊WEB服务Crash，还可能会让你的整台服务器马上掛了

	如果你有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。
	while (1) {
	    //每次只做1000条
	    mysql_query("DELETE FROM logs WHERE log_date <= '2009-11-01' LIMIT 1000");
	    if (mysql_affected_rows() == 0) {
	        // 没得可删了，退出！
	        break;
	    }
	    // 每次都要休息一会儿
	    usleep(50000);
	}


18. 越小的列会越快
	如何设计让你的数据库更加紧凑
	对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。
	，把你的数据变得紧凑会对这种情况非常有帮助，
	因为这减少了对硬盘的访问

	 MySQL 的文档 Storage Requirements
	https://dev.mysql.com/doc/refman/5.7/en/storage-requirements.html


	果一个表只会有几列罢了（比如说字典表，配置表）
	我们就没有理由使用 INT 来做主键，
	使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些
	如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多


	你也需要留够足够的扩展空间，你日后来干这个事，你会死的很难看
	一个简单的ALTER TABLE语句花了3个多小时，因为里面有一千六百万条数据。

19. 选择正确的存储引擎
	MySQL 中有两个存储引擎 MyISAM 和 InnoDB
	每个引擎都有利有弊

	MyISAM 适合于一些需要大量查询的应用，
	但其对于有大量写操作并不是很好。

	甚至你只是需要update一个字段，整个表都会被锁起来，
	而别的进程，就算是读进程都无法操作直到读操作完成。
	另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的

	InnoDB 的趋势会是一个非常复杂的存储引擎，
	对于一些小的应用，它会比 MyISAM 还慢。
	他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。
	并且，他还支持更多的高级应用，比如：事务。



20. 使用一个对象关系映射器（Object Relational Mapper）

	ORM 的最重要的是“Lazy Loading”，
	也就是说，只有在需要的去取值的时候才会去真正的去做。
	但你也需要小心这种机制的副作用，
	因为这很有可能会因为要去创建很多很多小的查询反而会降低性能。

	ORM 还可以把你的SQL语句打包成一个事务，这会比单独执行他们快得多得多。

	个人最喜欢的PHP的ORM是：Doctrine。
	http://www.doctrine-project.org/


21. 小心“永久链接”
	“永久链接”的目的是用来减少重新创建MySQL链接的次数

	当一个链接被创建了，它会永远处在连接的状态，
	就算是数据库操作已经结束了。而且，
	自从我们的Apache开始重用它的子进程后——也就是说，
	下一次的HTTP请求会重用Apache的子进程，并重用相同的 MySQL 链接。

	PHP手册：mysql_pconnect()
	http://php.net/manual/en/function.mysql-pconnect.php

	你只有有限的链接数，内存问题，文件句柄数，等等。

	Apache 运行在极端并行的环境中，会创建很多很多的了进程。
	这就是为什么这种“永久链接”的机制工作地不好的原因。
	在你决定要使用“永久链接”之前，
	你需要好好地考虑一下你的整个系统的架构。








