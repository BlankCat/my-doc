Binder学习指南

http://weishu.me/2016/01/12/binder-index-for-newer/

http://weishu.me/about/

http://weishu.me/2016/01/12/binder-index-for-newer/

https://blog.csdn.net/freekiteyu/article/details/70082302

老罗的博客
https://blog.csdn.net/Luoshengyang/


Client, Server, SM(Service Manager), Binder driver;
Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。

Binder到底是什么？
Server里面的Binder和Client里面的Binder没有什么不同
一个Binder对象就代表了所有，
它不用关心实现的细节，
甚至不用关心驱动以及SM的存在；
这就是抽象


Binder指的是一种通信机制；
我们说AIDL使用Binder进行通信，
指的就是Binder这种IPC机制。

Server进程来说，Binder指的是Binder本地对象
Client来说，Binder指的是Binder代理对象，它只是Binder本地对象的一个远程代理
对于传输过程而言，Binder是可以进行跨进程传递的对象；
	Binder驱动会对具有跨进程传递能力的对象做特殊处理：
	自动完成代理对象和本地对象的转换


面向对象思想的引入
将进程间通信转化为
通过对某个Binder对象的引用调用该对象的方法，
而其独特之处在于Binder对象是一个可以跨进程引用的对象，
它的实体（本地对象）位于一个进程中，
而它的引用（代理对象）却遍布于系统的各个进程之中。

最诱人的是，这个引用和java里引用一样既可以是强类型，也可以是弱类型，
而且可以从一个进程传给其它进程，让大家都能访问同一Server，
就象将一个对象或引用赋值给另一个引用一样。
Binder模糊了进程边界，淡化了进程间通信过程，
整个系统仿佛运行于同一个面向对象的程序之中。
形形色色的Binder对象以及星罗棋布的引用仿佛粘接各个应用程序的胶水，
这也是Binder在英文里的原意




Server进程里面的Binder对象指的是Binder本地对象，
Client里面的对象值得是Binder代理对象；
Binder驱动
在Binder对象进行跨进程传递的时候，Binder驱动会自动完成这两种类型的转换；
因此Binder驱动必然保存了每一个跨越进程的Binder对象的相关信息；

在驱动中，
Binder本地对象的代表是一个叫做binder_node的数据结构，
Binder代理对象是用binder_ref代表的；
有的地方把Binder本地对象直接称作Binder实体，
把Binder代理对象直接称作Binder引用（句柄），
其实指的是Binder对象在驱动里面的表现形式



深入理解Java层的Binder
IBinder/IInterface/Binder/BinderProxy/Stub
使用AIDL接口的时候，经常会接触到这些类，那么这每个类代表的是什么呢？


IBinder是一个接口，它代表了一种跨进程传输的能力；
	只要实现了这个接口，就能将这个对象进行跨进程传递；
	这是驱动底层支持的；在跨进程数据流经驱动的时候，
	驱动会识别IBinder类型的数据，
	从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。

IBinder负责数据传输，那么client与server端的调用契约（这里不用接口避免混淆）呢？
	这里的IInterface代表的就是远程server对象具有什么能力。
	具体来说，就是aidl里面的接口。

Java层的Binder类，代表的其实就是Binder本地对象。
BinderProxy类是Binder类的一个内部类，
它代表远程进程的Binder对象的本地代理；
这两个类都继承自IBinder, 因而都具有跨进程传输的能力；

实际上，
在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。
在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；

这个类继承了Binder, 说明它是一个Binder本地对象，
它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；

Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成，这里使用了策略模式。

























